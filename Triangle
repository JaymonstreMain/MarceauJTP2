public class Triangle {
    private int coteA;
    private int coteB;
    private int coteC;

    public Triangle(int CoteA, int coteB, int coteC){
        super(nom);
        if (validerCote(coteA) && validerCote(coteB) && validerCote(coteC)){

        }
    }

    public int calculerPerimetre() {
        return (coteA + coteB + coteC);
    }

    public int calculerSurface() {
        //Triangle rectangle, triangle isocÃ¨le, triangle equilateral
    }

    public int getCoteA() {
        return coteA;
    }

    public int getCoteB() {
        return coteB;
    }

    public int getCoteC() {
        return coteC;
    }

    public static Triangle getNbCoteEgaux() {
        int nbCoteEgaux;
        if (coteA = coteB...)
        return ;
        
        /*
        package practice;

public class Bla {
    public Bla(){
        System.out.println(caluclerAireTriangle(4, 8, 6));
    }
    public double calculerPerimetreTriangle(int cote1, int cote2, int cote3){
        return (cote1 + cote2 + cote3);
    }
    public double caluclerAireTriangle(int cote1, int cote2, int cote3){
        double p = calculerPerimetreTriangle(cote1, cote2, cote3) / 2;
        return (Math.sqrt(p * (p - cote1) * (p - cote2) * p * (p - cote1)));
    }

    public static void main(String[] args) {
        new Bla();
    }
}

        */
    }
    //Calculer le nb de cote egaux


    private static boolean validerCote(int cote) {
        return (coteA >= Forme.MIN_VAL && coteA <= Forme.MAX_VAL &&
                coteB >= Forme.MIN_VAL && coteB <= Forme.MAX_VAL &&
                coteB >= Forme.MIN_VAL && coteB <= Forme.MAX_VAL);
    }
}

/*
aire = a demie perimetre est p

racine de (p(p-a)(p-b)(p-c))

*/
